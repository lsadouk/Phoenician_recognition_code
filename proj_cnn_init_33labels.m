function net = proj_cnn_init_33labels(num_categories, dataset)

rng('default');
rng(0);
f=1/100; 
bias = 0.01;

net.layers = {} ;

if isequal(dataset, 'CifarData')
    nb_channels = 3;
else
    nb_channels = 1;
end

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(5,5,nb_channels,20, 'single'), zeros(1, 20, 'single')}}, ...
                           'biases', bias*ones(1, 20, 'single'), ...
                           'stride', 1, ...
                           'pad', 0, ...
                           'filtersLearningRate', 1, ...
                           'biasesLearningRate', 2, ...
                           'filtersWeightDecay', 1, ...
                           'biasesWeightDecay', 0, ...
                           'name', 'conv1') ;
net.layers{end+1} = struct('type', 'relu') ;                       
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ; %[7 7] st=7


%% --------------- added --------------
                
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(4,4,20,50, 'single'), zeros(1, 50, 'single')}}, ...
                           'biases', bias*ones(1, 50, 'single'), ...
                           'stride', 1, ...
                           'pad', 0, ...
                           'filtersLearningRate', 1, ...
                           'biasesLearningRate', 2, ...
                           'filtersWeightDecay', 1, ...
                           'biasesWeightDecay', 0, ...
                           'name', 'conv2') ;
net.layers{end+1} = struct('type', 'relu') ;                       
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ; 



%% -------------------------------
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(3,3,50,150, 'single'), zeros(1, 150, 'single')}}, ...
                           'biases', bias*ones(1,150,'single'), ...
                           'stride', 1, ...
                           'pad', 1, ...
                           'filtersLearningRate', 1, ...
                           'biasesLearningRate', 2, ...
                           'filtersWeightDecay', 1, ...
                           'biasesWeightDecay', 0, ...
                           'name', 'conv3') ;
net.layers{end+1} = struct('type', 'relu') ;                                            
                                        
%% -------------------------------                       
 net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(3,3,150,150, 'single'), zeros(1, 150, 'single')}}, ...
                           'biases', bias*ones(1,150,'single'), ...
                           'stride', 1, ...
                           'pad', 1, ...
                           'filtersLearningRate', 1, ...
                           'biasesLearningRate', 2, ...
                           'filtersWeightDecay', 1, ...
                           'biasesWeightDecay', 0, ...
                           'name', 'conv5') ;
net.layers{end+1} = struct('type', 'relu') ;                                             
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ; 
net.layers{end + 1} = struct('type','dropout','rate',0.5);
%% -------------------------------        
%net.layers{end + 1} = struct('type','dropout','rate',0.5);
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(6,6,150,500, 'single'), zeros(1, 500, 'single')}}, ...
                           'biases', bias*ones(1,500,'single'), ...
                           'stride', 1, ...
                           'pad', 0, ...
                           'filtersLearningRate', 1, ...
                           'biasesLearningRate', 2, ...
                           'filtersWeightDecay', 1, ...
                           'biasesWeightDecay', 0, ...
                           'name', 'fc1') ;
net.layers{end+1} = struct('type', 'relu') ;   
net.layers{end + 1} = struct('type','dropout','rate',0.5);
%% -------------------------------                       

% net.layers{end+1} = struct('type', 'conv', ...
%                            'weights', {{f*randn(1,1,500,500, 'single'), zeros(1, 500, 'single')}}, ...
%                            'biases', bias*ones(1,500,'single'), ...
%                            'stride', 1, ...
%                            'pad', 0, ...
%                            'filtersLearningRate', 1, ...
%                            'biasesLearningRate', 2, ...
%                            'filtersWeightDecay', 1, ...
%                            'biasesWeightDecay', 0, ...
%                            'name', 'fc2') ;
% net.layers{end+1} = struct('type', 'relu') ;   
% net.layers{end + 1} = struct('type','dropout','rate',0.5);
%% -------------------------------                       
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(1,1,500,num_categories, 'single'), zeros(1, num_categories, 'single')}}, ...
                            'biases', bias*ones(1, num_categories, 'single'), ...   
                            'stride', 1, ...
                           'pad', 0, ...
                           'filtersLearningRate', 1, ...
                           'biasesLearningRate', 2, ...
                           'filtersWeightDecay', 1, ...
                           'biasesWeightDecay', 0, ...
                           'name', 'fc3') ;
%% -------------------------------
% Loss layer
net.layers{end+1} = struct('type', 'softmaxloss') ;
for i= 1:length(net.layers(1:end))
    net.layers{i}.dilate = [1;1];
end
% Visualize the network
vl_simplenn_display(net, 'inputSize', [60 60 1 100])